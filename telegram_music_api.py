#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Music Bot + API Server
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Render
"""

import os
import asyncio
import logging
import json
import hashlib
from datetime import datetime
import threading
import uuid
from pathlib import Path
import mimetypes

# Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Web API
from flask import Flask, request, jsonify, send_file, Response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
PORT = int(os.getenv('PORT', 10000))

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
MUSIC_DIR = Path("music")
MUSIC_DIR.mkdir(exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–µ–∫–æ–≤ (–ø—Ä–æ—Å—Ç–æ–µ –≤ –ø–∞–º—è—Ç–∏)
tracks_db = {}

def save_tracks():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏ –Ω–∞ –¥–∏—Å–∫"""
    try:
        with open(MUSIC_DIR / "tracks.json", 'w', encoding='utf-8') as f:
            json.dump(tracks_db, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving tracks: {e}")

def load_tracks():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ —Å –¥–∏—Å–∫–∞"""
    global tracks_db
    try:
        if os.path.exists(MUSIC_DIR / "tracks.json"):
            with open(MUSIC_DIR / "tracks.json", 'r', encoding='utf-8') as f:
                tracks_db = json.load(f)
                logger.info(f"Loaded {len(tracks_db)} tracks")
    except Exception as e:
        logger.error(f"Error loading tracks: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏
load_tracks()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.after_request
def after_request(response):
    """–ü—Ä–æ—Å—Ç–∞—è CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>üéµ Music Bot API</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .stat {{ display: inline-block; margin: 10px; padding: 10px 20px; background: #e3f2fd; border-radius: 5px; }}
            .endpoint {{ background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid #007bff; }}
            code {{ background: #f1f3f4; padding: 4px 8px; border-radius: 4px; font-family: monospace; }}
            h2 {{ color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéµ Music Bot API Server</h1>
            
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stat">–¢—Ä–µ–∫–æ–≤: {len(tracks_db)}</div>
            <div class="stat">–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç</div>
            <div class="stat">–†–µ–∂–∏–º: {'Webhook' if WEBHOOK_URL else 'Polling'}</div>
            
            <h2>üîó API Endpoints</h2>
            
            <div class="endpoint">
                <strong>GET /api/tracks</strong> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤<br>
                <code>curl {request.host_url}api/tracks</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/search?q=–∑–∞–ø—Ä–æ—Å</strong> - –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤<br>
                <code>curl "{request.host_url}api/search?q=music"</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/play/&lt;id&gt;</strong> - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ<br>
                <code>curl {request.host_url}api/play/12345</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/download/&lt;id&gt;</strong> - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ<br>
                <code>curl -O {request.host_url}api/download/12345</code>
            </div>
            
            <h2>ü§ñ Telegram Bot</h2>
            <p>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –±–æ—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É</p>
            <p>üéµ –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API</p>
            
            <h2>üéß –ü–ª–µ–µ—Ä</h2>
            <div id="player"></div>
            
            <script>
                // –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–ø–ª–µ–µ—Ä
                fetch('/api/tracks')
                    .then(r => r.json())
                    .then(data => {{
                        const player = document.getElementById('player');
                        if (data.tracks && data.tracks.length > 0) {{
                            let html = '<h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–∫–∏:</h3>';
                            data.tracks.slice(0, 5).forEach(track => {{
                                html += `
                                    <div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 5px;">
                                        <strong>${{track.title}}</strong> - ${{track.artist}}<br>
                                        <audio controls style="width: 100%; margin-top: 5px;">
                                            <source src="/api/play/${{track.id}}" type="audio/mpeg">
                                        </audio>
                                    </div>
                                `;
                            }});
                            player.innerHTML = html;
                        }} else {{
                            player.innerHTML = '<p>–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!</p>';
                        }}
                    }});
            </script>
        </div>
    </body>
    </html>
    """

@app.route('/health')
def health():
    return jsonify({'status': 'ok', 'tracks': len(tracks_db)})

@app.route('/api/tracks')
def api_tracks():
    """–í—Å–µ —Ç—Ä–µ–∫–∏"""
    safe_tracks = []
    for track in tracks_db.values():
        safe_track = track.copy()
        safe_track.pop('file_path', None)
        safe_track.pop('file_id', None)
        safe_tracks.append(safe_track)
    
    return jsonify({'tracks': safe_tracks, 'count': len(safe_tracks)})

@app.route('/api/search')
def api_search():
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"""
    query = request.args.get('q', '').strip().lower()
    if not query:
        return jsonify({'error': 'Parameter q required'}), 400
    
    results = []
    for track in tracks_db.values():
        if query in track['title'].lower() or query in track['artist'].lower():
            safe_track = track.copy()
            safe_track.pop('file_path', None)
            safe_track.pop('file_id', None)
            results.append(safe_track)
    
    return jsonify({'query': query, 'tracks': results, 'count': len(results)})

@app.route('/api/play/<track_id>')
def api_play(track_id):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
    if track_id not in tracks_db:
        return jsonify({'error': 'Track not found'}), 404
    
    track = tracks_db[track_id]
    file_path = track['file_path']
    
    if not os.path.exists(file_path):
        return jsonify({'error': 'File not found'}), 404
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    tracks_db[track_id]['play_count'] = tracks_db[track_id].get('play_count', 0) + 1
    save_tracks()
    
    mime_type = 'audio/mpeg'
    
    def generate():
        with open(file_path, 'rb') as f:
            while True:
                chunk = f.read(8192)
                if not chunk:
                    break
                yield chunk
    
    return Response(
        generate(),
        mimetype=mime_type,
        headers={'Content-Disposition': f'inline; filename="{track["title"]}.mp3"'}
    )

@app.route('/api/download/<track_id>')
def api_download(track_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
    if track_id not in tracks_db:
        return jsonify({'error': 'Track not found'}), 404
    
    track = tracks_db[track_id]
    file_path = track['file_path']
    
    if not os.path.exists(file_path):
        return jsonify({'error': 'File not found'}), 404
    
    filename = f"{track['artist']} - {track['title']}.mp3"
    return send_file(file_path, as_attachment=True, download_name=filename)

# Webhook –¥–ª—è Telegram
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if BOT_TOKEN == 'YOUR_BOT_TOKEN':
        return 'Bot not configured', 400
    
    try:
        update_data = request.get_json()
        update = Update.de_json(update_data, telegram_app.bot)
        asyncio.create_task(telegram_app.process_update(update))
        return 'OK'
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return 'Error', 500

# Telegram –±–æ—Ç
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    text = f"""
üéµ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –±–æ—Ç—É
2. –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/list - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
/api - API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üì§ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton("üîó API", callback_data="api")]
    ]
    
    await update.message.reply_text(
        text, 
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    audio = update.message.audio
    user = update.effective_user
    
    if not audio:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    if audio.file_size > 50 * 1024 * 1024:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 50MB)")
        return
    
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é...")
    
    try:
        file = await context.bot.get_file(audio.file_id)
        
        title = audio.title or audio.file_name or "Unknown"
        artist = audio.performer or "Unknown Artist"
        
        track_id = str(uuid.uuid4())[:8]
        safe_filename = f"{track_id}.mp3"
        file_path = MUSIC_DIR / safe_filename
        
        await file.download_to_drive(file_path)
        
        tracks_db[track_id] = {
            'id': track_id,
            'title': title,
            'artist': artist,
            'file_path': str(file_path),
            'file_id': audio.file_id,
            'duration': audio.duration or 0,
            'user_id': user.id,
            'uploaded_at': datetime.now().isoformat(),
            'play_count': 0
        }
        
        save_tracks()
        
        base_url = WEBHOOK_URL or "http://localhost:10000"
        
        success_text = f"""
‚úÖ *–¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!*

üéµ {title}
üë§ {artist}
üÜî `{track_id}`

*–°—Å—ã–ª–∫–∏:*
‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: `{base_url}/api/play/{track_id}`
üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: `{base_url}/api/download/{track_id}`
        """
        
        await update.message.reply_text(success_text, parse_mode='Markdown')
        logger.info(f"Track uploaded: {title} by {artist}")
        
    except Exception as e:
        logger.error(f"Upload error: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    count = len(tracks_db)
    total_plays = sum(track.get('play_count', 0) for track in tracks_db.values())
    
    text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üéµ –¢—Ä–µ–∫–æ–≤: {count}
‚ñ∂Ô∏è –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {total_plays}
    """
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤"""
    if not tracks_db:
        await update.message.reply_text("üìã –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞")
        return
    
    tracks = list(tracks_db.values())
    recent = sorted(tracks, key=lambda x: x['uploaded_at'], reverse=True)[:5]
    
    text = f"üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–∫–∏* ({len(tracks)} –≤—Å–µ–≥–æ):\n\n"
    
    for i, track in enumerate(recent, 1):
        text += f"{i}. {track['title']} - {track['artist']}\n"
        text += f"   ID: `{track['id']}`\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def api_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    base_url = WEBHOOK_URL or "http://localhost:10000"
    
    text = f"""
üîó *API Endpoints*

*–ë–∞–∑–æ–≤—ã–π URL:* `{base_url}`

‚Ä¢ `/api/tracks` - –í—Å–µ —Ç—Ä–µ–∫–∏
‚Ä¢ `/api/search?q=–∑–∞–ø—Ä–æ—Å` - –ü–æ–∏—Å–∫  
‚Ä¢ `/api/play/ID` - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
‚Ä¢ `/api/download/ID` - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ

*–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:* {base_url}
    """
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        count = len(tracks_db)
        text = f"üìä –¢—Ä–µ–∫–æ–≤: {count}"
        await query.edit_message_text(text)
    elif query.data == "list":
        count = len(tracks_db)
        text = f"üìã –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {count} —Ç—Ä–µ–∫–æ–≤"
        await query.edit_message_text(text)
    elif query.data == "api":
        base_url = WEBHOOK_URL or "http://localhost:10000"
        text = f"üîó API: {base_url}"
        await query.edit_message_text(text)

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask"""
    app.run(host='0.0.0.0', port=PORT, debug=False, threaded=True)

async def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN':
        logger.warning("BOT_TOKEN not set!")
        return None
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("api", api_command))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    return application

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app
    
    logger.info("üöÄ Starting Music Bot + API")
    
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info(f"üåê API Server on port {PORT}")
    
    # Telegram –±–æ—Ç
    telegram_app = await setup_telegram()
    
    if telegram_app and WEBHOOK_URL:
        logger.info("ü§ñ Webhook mode")
        await telegram_app.bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
        while True:
            await asyncio.sleep(60)
    elif telegram_app:
        logger.info("ü§ñ Polling mode")
        await telegram_app.run_polling()
    else:
        logger.info("ü§ñ API only mode")
        while True:
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(main())
