#!/usr/bin/env python3
"""
Telegram Music Bot + API Server
–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
"""

import os
import asyncio
import logging
import json
import hashlib
from datetime import datetime
from typing import Dict, List, Optional
import threading
import uuid
from pathlib import Path

# Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Web API
from flask import Flask, request, jsonify, send_file, Response
from flask_cors import CORS
import mimetypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
PORT = int(os.getenv('PORT', 10000))
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
MUSIC_DIR = Path("music")
MUSIC_DIR.mkdir(exist_ok=True)

class MusicStorage:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—É–∑—ã–∫–∏ –≤ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.tracks: Dict[str, dict] = {}
        self.load_from_disk()
    
    def add_track(self, file_id: str, title: str, artist: str, file_path: str, 
                  duration: int = 0, user_id: int = None) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"""
        track_id = str(uuid.uuid4())[:8]
        
        self.tracks[track_id] = {
            'id': track_id,
            'file_id': file_id,
            'title': title,
            'artist': artist,
            'file_path': file_path,
            'duration': duration,
            'user_id': user_id,
            'uploaded_at': datetime.now().isoformat(),
            'play_count': 0
        }
        
        self.save_to_disk()
        return track_id
    
    def get_track(self, track_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫ –ø–æ ID"""
        return self.tracks.get(track_id)
    
    def get_all_tracks(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏"""
        return list(self.tracks.values())
    
    def search_tracks(self, query: str) -> List[dict]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"""
        query = query.lower()
        results = []
        
        for track in self.tracks.values():
            if (query in track['title'].lower() or 
                query in track['artist'].lower()):
                results.append(track)
        
        return results
    
    def increment_play_count(self, track_id: str):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"""
        if track_id in self.tracks:
            self.tracks[track_id]['play_count'] += 1
            self.save_to_disk()
    
    def delete_track(self, track_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫"""
        if track_id in self.tracks:
            track = self.tracks[track_id]
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            try:
                if os.path.exists(track['file_path']):
                    os.remove(track['file_path'])
            except Exception as e:
                logger.error(f"Error deleting file: {e}")
            
            del self.tracks[track_id]
            self.save_to_disk()
            return True
        return False
    
    def save_to_disk(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫"""
        try:
            with open(MUSIC_DIR / "tracks.json", 'w', encoding='utf-8') as f:
                json.dump(self.tracks, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving tracks: {e}")
    
    def load_from_disk(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–∏—Å–∫–∞"""
        try:
            if os.path.exists(MUSIC_DIR / "tracks.json"):
                with open(MUSIC_DIR / "tracks.json", 'r', encoding='utf-8') as f:
                    self.tracks = json.load(f)
                    logger.info(f"Loaded {len(self.tracks)} tracks from disk")
        except Exception as e:
            logger.error(f"Error loading tracks: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
music_storage = MusicStorage()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# API –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    stats = {
        'tracks_count': len(music_storage.tracks),
        'status': 'running',
        'bot_status': 'active' if BOT_TOKEN != 'YOUR_BOT_TOKEN' else 'not_configured'
    }
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>üéµ Music Bot API</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .stat {{ display: inline-block; margin: 10px; padding: 10px 20px; background: #e3f2fd; border-radius: 5px; }}
            .endpoint {{ background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; }}
            code {{ background: #e8e8e8; padding: 2px 5px; border-radius: 3px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéµ Music Bot API Server</h1>
            
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stat">–¢—Ä–µ–∫–æ–≤: {stats['tracks_count']}</div>
            <div class="stat">–°—Ç–∞—Ç—É—Å: {stats['status']}</div>
            <div class="stat">–ë–æ—Ç: {stats['bot_status']}</div>
            
            <h2>üîó API Endpoints</h2>
            
            <div class="endpoint">
                <strong>GET /api/tracks</strong> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤<br>
                <code>curl {request.host_url}api/tracks</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/search?q=–∑–∞–ø—Ä–æ—Å</strong> - –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤<br>
                <code>curl "{request.host_url}api/search?q=music"</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/track/&lt;id&gt;</strong> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ<br>
                <code>curl {request.host_url}api/track/12345</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/play/&lt;id&gt;</strong> - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫<br>
                <code>curl {request.host_url}api/play/12345</code>
            </div>
            
            <div class="endpoint">
                <strong>GET /api/download/&lt;id&gt;</strong> - –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫<br>
                <code>curl -O {request.host_url}api/download/12345</code>
            </div>
            
            <h2>ü§ñ Telegram Bot</h2>
            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –±–æ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.</p>
            <p>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ API.</p>
        </div>
    </body>
    </html>
    """

@app.route('/health')
def health():
    """Health check"""
    return jsonify({'status': 'ok', 'tracks': len(music_storage.tracks)})

@app.route('/api/tracks')
def api_tracks():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏"""
    tracks = music_storage.get_all_tracks()
    
    # –£–±–∏—Ä–∞–µ–º file_path –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    safe_tracks = []
    for track in tracks:
        safe_track = track.copy()
        safe_track.pop('file_path', None)
        safe_track.pop('file_id', None)
        safe_tracks.append(safe_track)
    
    return jsonify({
        'tracks': safe_tracks,
        'count': len(safe_tracks)
    })

@app.route('/api/search')
def api_search():
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"""
    query = request.args.get('q', '').strip()
    
    if not query:
        return jsonify({'error': 'Query parameter "q" is required'}), 400
    
    tracks = music_storage.search_tracks(query)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
    safe_tracks = []
    for track in tracks:
        safe_track = track.copy()
        safe_track.pop('file_path', None)
        safe_track.pop('file_id', None)
        safe_tracks.append(safe_track)
    
    return jsonify({
        'query': query,
        'tracks': safe_tracks,
        'count': len(safe_tracks)
    })

@app.route('/api/track/<track_id>')
def api_track_info(track_id):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ"""
    track = music_storage.get_track(track_id)
    
    if not track:
        return jsonify({'error': 'Track not found'}), 404
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
    safe_track = track.copy()
    safe_track.pop('file_path', None)
    safe_track.pop('file_id', None)
    
    return jsonify(safe_track)

@app.route('/api/play/<track_id>')
def api_play_track(track_id):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ (—Å—Ç—Ä–∏–º)"""
    track = music_storage.get_track(track_id)
    
    if not track:
        return jsonify({'error': 'Track not found'}), 404
    
    file_path = track['file_path']
    
    if not os.path.exists(file_path):
        return jsonify({'error': 'Audio file not found'}), 404
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    music_storage.increment_play_count(track_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    mime_type, _ = mimetypes.guess_type(file_path)
    if not mime_type:
        mime_type = 'audio/mpeg'
    
    def generate():
        with open(file_path, 'rb') as f:
            while True:
                chunk = f.read(8192)  # 8KB chunks
                if not chunk:
                    break
                yield chunk
    
    return Response(
        generate(),
        mimetype=mime_type,
        headers={
            'Content-Disposition': f'inline; filename="{track["title"]}.mp3"',
            'Accept-Ranges': 'bytes'
        }
    )

@app.route('/api/download/<track_id>')
def api_download_track(track_id):
    """–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫"""
    track = music_storage.get_track(track_id)
    
    if not track:
        return jsonify({'error': 'Track not found'}), 404
    
    file_path = track['file_path']
    
    if not os.path.exists(file_path):
        return jsonify({'error': 'Audio file not found'}), 404
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    music_storage.increment_play_count(track_id)
    
    filename = f"{track['artist']} - {track['title']}.mp3"
    
    return send_file(
        file_path,
        as_attachment=True,
        download_name=filename,
        mimetype='audio/mpeg'
    )

@app.route('/api/stats')
def api_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    tracks = music_storage.get_all_tracks()
    
    total_plays = sum(track.get('play_count', 0) for track in tracks)
    top_tracks = sorted(tracks, key=lambda x: x.get('play_count', 0), reverse=True)[:10]
    
    return jsonify({
        'total_tracks': len(tracks),
        'total_plays': total_plays,
        'top_tracks': [
            {
                'id': track['id'],
                'title': track['title'],
                'artist': track['artist'],
                'play_count': track.get('play_count', 0)
            }
            for track in top_tracks
        ]
    })

# Webhook –¥–ª—è Telegram
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è Telegram"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN':
        return 'Bot not configured', 400
        
    try:
        update_data = request.get_json()
        update = Update.de_json(update_data, telegram_app.bot)
        asyncio.create_task(telegram_app.process_update(update))
        return 'OK'
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return 'Error', 500

# Telegram –±–æ—Ç
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    welcome_text = f"""
üéµ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å API*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

*–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*
‚Ä¢ üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
‚Ä¢ üéµ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
‚Ä¢ üîó –°–æ–∑–¥–∞–Ω–∏–µ API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/list - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
/api - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª! üé∂
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list")
        ],
        [
            InlineKeyboardButton("üîó API Info", callback_data="api"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    tracks = music_storage.get_all_tracks()
    total_plays = sum(track.get('play_count', 0) for track in tracks)
    
    if not tracks:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        return
    
    # –¢–æ–ø-5 —Ç—Ä–µ–∫–æ–≤
    top_tracks = sorted(tracks, key=lambda x: x.get('play_count', 0), reverse=True)[:5]
    
    stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏*

üéµ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}
‚ñ∂Ô∏è –û–±—â–µ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {total_plays}

*–¢–æ–ø-5 —Ç—Ä–µ–∫–æ–≤:*
"""
    
    for i, track in enumerate(top_tracks, 1):
        stats_text += f"{i}. *{track['title']}* - {track['artist']} ({track.get('play_count', 0)} ‚ñ∂Ô∏è)\n"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤"""
    tracks = music_storage.get_all_tracks()
    
    if not tracks:
        await update.message.reply_text("üìã –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–µ–∫–æ–≤
    recent_tracks = sorted(tracks, key=lambda x: x['uploaded_at'], reverse=True)[:10]
    
    list_text = f"üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–∫–∏* ({len(tracks)} –≤—Å–µ–≥–æ):\n\n"
    
    for i, track in enumerate(recent_tracks, 1):
        list_text += f"{i}. *{track['title']}* - {track['artist']}\n"
        list_text += f"   ID: `{track['id']}` | ‚ñ∂Ô∏è {track.get('play_count', 0)}\n\n"
    
    if len(tracks) > 10:
        list_text += f"... –∏ –µ—â–µ {len(tracks) - 10} —Ç—Ä–µ–∫–æ–≤"
    
    await update.message.reply_text(list_text, parse_mode='Markdown')

async def api_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    base_url = WEBHOOK_URL or "https://your-app.onrender.com"
    
    api_text = f"""
üîó *API Endpoints*

*–ë–∞–∑–æ–≤—ã–π URL:* `{base_url}`

*–û—Å–Ω–æ–≤–Ω—ã–µ endpoints:*
‚Ä¢ `GET /api/tracks` - –í—Å–µ —Ç—Ä–µ–∫–∏
‚Ä¢ `GET /api/search?q=–∑–∞–ø—Ä–æ—Å` - –ü–æ–∏—Å–∫
‚Ä¢ `GET /api/play/ID` - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
‚Ä¢ `GET /api/download/ID` - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã:*
```
curl {base_url}/api/tracks
curl "{base_url}/api/search?q=music"
curl {base_url}/api/play/12345
```

*–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:*
{base_url}
    """
    
    await update.message.reply_text(api_text, parse_mode='Markdown')

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    audio = update.message.audio
    user = update.effective_user
    
    if not audio:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å 50MB)
    if audio.file_size > 50 * 1024 * 1024:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 50MB)")
        return
    
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(audio.file_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        title = audio.title or audio.file_name or "Unknown Title"
        artist = audio.performer or "Unknown Artist"
        duration = audio.duration or 0
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = f"{hashlib.md5(audio.file_id.encode()).hexdigest()[:8]}.mp3"
        file_path = MUSIC_DIR / safe_filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º
        await file.download_to_drive(file_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        track_id = music_storage.add_track(
            file_id=audio.file_id,
            title=title,
            artist=artist,
            file_path=str(file_path),
            duration=duration,
            user_id=user.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        base_url = WEBHOOK_URL or "https://your-app.onrender.com"
        
        success_text = f"""
‚úÖ *–¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!*

üéµ *{title}*
üë§ {artist}
‚è±Ô∏è {duration//60}:{duration%60:02d}
üÜî `{track_id}`

*API —Å—Å—ã–ª–∫–∏:*
‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: `{base_url}/api/play/{track_id}`
üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: `{base_url}/api/download/{track_id}`
        """
        
        keyboard = [
            [
                InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", url=f"{base_url}/api/play/{track_id}"),
                InlineKeyboardButton("üíæ –°–∫–∞—á–∞—Ç—å", url=f"{base_url}/api/download/{track_id}")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info(f"Track uploaded: {title} by {artist} (ID: {track_id})")
        
    except Exception as e:
        logger.error(f"Error uploading audio: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        tracks = music_storage.get_all_tracks()
        total_plays = sum(track.get('play_count', 0) for track in tracks)
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üéµ –¢—Ä–µ–∫–æ–≤: {len(tracks)}
‚ñ∂Ô∏è –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {total_plays}
        """
        await query.edit_message_text(stats_text, parse_mode='Markdown')
        
    elif query.data == "list":
        tracks = music_storage.get_all_tracks()
        if tracks:
            list_text = f"üìã *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞* ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        else:
            list_text = "üìã –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞"
        await query.edit_message_text(list_text, parse_mode='Markdown')
        
    elif query.data == "api":
        base_url = WEBHOOK_URL or "https://your-app.onrender.com"
        api_text = f"üîó *API:* {base_url}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        await query.edit_message_text(api_text, parse_mode='Markdown')
        
    elif query.data == "help":
        help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å*

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –±–æ—Ç—É
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

–ö–æ–º–∞–Ω–¥—ã: /start /stats /list /api
        """
        await query.edit_message_text(help_text, parse_mode='Markdown')

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    app.run(host='0.0.0.0', port=PORT, debug=False, threaded=True)

async def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN':
        logger.warning("BOT_TOKEN not configured!")
        return None
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("api", api_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤"),
        BotCommand("api", "API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ]
    await application.bot.set_my_commands(commands)
    
    return application

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app
    
    logger.info("üöÄ Starting Music Bot + API Server")
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info(f"üåê API Server started on port {PORT}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
    telegram_app = await setup_telegram()
    
    if telegram_app and WEBHOOK_URL:
        # Webhook —Ä–µ–∂–∏–º
        logger.info("ü§ñ Setting up webhook mode")
        await telegram_app.bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
        logger.info("‚úÖ Webhook configured")
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            await asyncio.sleep(60)
            
    elif telegram_app:
        # Polling —Ä–µ–∂–∏–º (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        logger.info("ü§ñ Starting polling mode")
        await telegram_app.run_polling()
    else:
        logger.info("ü§ñ Bot not configured, running API only")
        # –¢–æ–ª—å–∫–æ API —Å–µ—Ä–≤–µ—Ä
        while True:
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(main())
